# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-01-07 21:49
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Genomeproject',
            fields=[
                ('gpv_id', models.IntegerField(primary_key=True, serialize=False)),
                ('assembly_accession', models.CharField(max_length=20)),
                ('asm_name', models.CharField(max_length=24)),
                ('genome_name', models.TextField()),
                ('version_id', models.IntegerField()),
                ('bioproject', models.CharField(max_length=14)),
                ('biosample', models.CharField(max_length=14)),
                ('taxid', models.IntegerField(blank=True, null=True)),
                ('species_taxid', models.IntegerField(blank=True, null=True)),
                ('org_name', models.TextField(blank=True)),
                ('infraspecific_name', models.CharField(max_length=24, null=True)),
                ('submitter', models.TextField(blank=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('gpv_directory', models.TextField(blank=True)),
                ('filename', models.CharField(max_length=75)),
                ('file_types', models.TextField(blank=True)),
                ('prev_gpv', models.IntegerField()),
            ],
            options={
                'db_table': 'genomeproject',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Genomeproject_Checksum',
            fields=[
                ('version_id', models.IntegerField(primary_key=True, serialize=False)),
                ('filename', models.CharField(max_length=64)),
                ('checksum', models.CharField(max_length=32)),
                ('gpv_id', models.IntegerField()),
            ],
            options={
                'db_table': 'genomeproject_checksum',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Genomeproject_Meta',
            fields=[
                ('gpv_id', models.IntegerField(primary_key=True, serialize=False)),
                ('gram_stain', models.CharField(blank=True, max_length=7)),
                ('genome_gc', models.FloatField(blank=True, null=True)),
                ('patho_status', models.CharField(blank=True, max_length=11)),
                ('disease', models.TextField(blank=True)),
                ('genome_size', models.FloatField(blank=True, null=True)),
                ('pathogenic_in', models.TextField(blank=True)),
                ('temp_range', models.CharField(blank=True, max_length=17)),
                ('habitat', models.CharField(blank=True, max_length=15)),
                ('shape', models.TextField(blank=True)),
                ('arrangement', models.TextField(blank=True)),
                ('endospore', models.CharField(blank=True, max_length=7)),
                ('motility', models.CharField(blank=True, max_length=7)),
                ('salinity', models.TextField(blank=True)),
                ('oxygen_req', models.CharField(blank=True, max_length=15)),
                ('centre', models.TextField(blank=True)),
                ('chromosome_num', models.IntegerField(blank=True, null=True)),
                ('plasmid_num', models.IntegerField(blank=True, null=True)),
                ('contig_num', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'genomeproject_meta',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Replicon',
            fields=[
                ('rpv_id', models.IntegerField(primary_key=True, serialize=False)),
                ('version_id', models.IntegerField()),
                ('rep_accnum', models.CharField(blank=True, max_length=20)),
                ('rep_version', models.IntegerField()),
                ('definition', models.TextField(blank=True)),
                ('rep_type', models.CharField(blank=True, max_length=10)),
                ('rep_ginum', models.TextField(blank=True)),
                ('file_name', models.TextField(blank=True)),
                ('file_types', models.TextField(blank=True)),
                ('cds_num', models.IntegerField(blank=True, null=True)),
                ('gene_num', models.IntegerField(blank=True, null=True)),
                ('rep_size', models.IntegerField(blank=True, null=True)),
                ('rna_num', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'replicon',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Taxonomy',
            fields=[
                ('taxon_id', models.IntegerField(primary_key=True, serialize=False)),
                ('superkingdom', models.TextField(blank=True)),
                ('phylum', models.TextField(blank=True)),
                ('class_field', models.TextField(blank=True, db_column='class')),
                ('order', models.TextField(blank=True)),
                ('family', models.TextField(blank=True)),
                ('genus', models.TextField(blank=True)),
                ('species', models.TextField(blank=True)),
                ('other', models.TextField(blank=True)),
                ('synonyms', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'taxonomy',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('version_id', models.IntegerField(primary_key=True, serialize=False)),
                ('dl_directory', models.TextField(blank=True)),
                ('version_date', models.DateField()),
                ('used_by', models.TextField(blank=True)),
                ('is_current', models.IntegerField()),
            ],
            options={
                'db_table': 'version',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Analysis',
            fields=[
                ('aid', models.AutoField(primary_key=True, serialize=False)),
                ('atype', models.IntegerField(choices=[(1, 'Custom'), (2, 'MicrobeDB')], default=1)),
                ('ext_id', models.CharField(max_length=24)),
                ('owner_id', models.IntegerField(default=0)),
                ('token', models.CharField(blank=True, max_length=22, null=True)),
                ('default_analysis', models.BooleanField(default=True)),
                ('status', models.IntegerField(choices=[(1, 'Pending'), (2, 'Running'), (3, 'Error'), (4, 'Complete')], default=1)),
                ('workdir', models.CharField(max_length=100)),
                ('microbedb_ver', models.IntegerField(default=0)),
                ('start_date', models.DateTimeField(null=True, verbose_name='date started')),
                ('complete_date', models.DateTimeField(null=True, verbose_name='date completed')),
            ],
            options={
                'db_table': 'Analysis',
            },
        ),
        migrations.CreateModel(
            name='CustomGenome',
            fields=[
                ('cid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('owner_id', models.IntegerField(default=0)),
                ('cds_num', models.IntegerField(default=0)),
                ('rep_size', models.IntegerField(default=0)),
                ('filename', models.CharField(blank=True, max_length=100, null=True)),
                ('formats', models.CharField(max_length=50)),
                ('contigs', models.IntegerField(default=1)),
                ('genome_status', models.IntegerField()),
                ('submit_date', models.DateTimeField(auto_now_add=True, verbose_name='date submitted')),
            ],
            options={
                'db_table': 'CustomGenome',
            },
        ),
        migrations.CreateModel(
            name='Distance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rep_accnum1', models.CharField(max_length=24)),
                ('rep_accnum2', models.CharField(max_length=24)),
                ('distance', models.FloatField()),
            ],
            options={
                'db_table': 'Distance',
            },
        ),
        migrations.CreateModel(
            name='GC',
            fields=[
                ('ext_id', models.CharField(max_length=24, primary_key=True, serialize=False)),
                ('min', models.FloatField()),
                ('max', models.FloatField()),
                ('mean', models.FloatField()),
                ('gc', models.TextField()),
            ],
            options={
                'db_table': 'GC',
            },
        ),
        migrations.CreateModel(
            name='Genes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ext_id', models.CharField(max_length=24)),
                ('start', models.IntegerField(default=0)),
                ('end', models.IntegerField(default=0)),
                ('strand', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=18, null=True)),
                ('gene', models.CharField(blank=True, max_length=10, null=True)),
                ('product', models.CharField(blank=True, max_length=100, null=True)),
                ('locus', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'Genes',
            },
        ),
        migrations.CreateModel(
            name='GenomicIsland',
            fields=[
                ('gi', models.AutoField(primary_key=True, serialize=False)),
                ('start', models.IntegerField(default=0)),
                ('end', models.IntegerField(default=0)),
                ('prediction_method', models.CharField(db_index=True, max_length=15)),
                ('details', models.CharField(blank=True, max_length=20, null=True)),
                ('aid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webui.Analysis')),
            ],
            options={
                'db_table': 'GenomicIsland',
            },
        ),
        migrations.CreateModel(
            name='GIAnalysisTask',
            fields=[
                ('taskid', models.AutoField(primary_key=True, serialize=False)),
                ('prediction_method', models.CharField(max_length=15)),
                ('status', models.IntegerField(choices=[(1, 'Pending'), (2, 'Running'), (3, 'Error'), (4, 'Complete')], default=1)),
                ('parameters', models.TextField(blank=True, null=True)),
                ('start_date', models.DateTimeField(null=True, verbose_name='date started')),
                ('complete_date', models.DateTimeField(null=True, verbose_name='date completed')),
                ('aid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='webui.Analysis')),
            ],
            options={
                'db_table': 'GIAnalysisTask',
            },
        ),
        migrations.CreateModel(
            name='IslandGenes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gi', models.IntegerField(db_index=True)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webui.Genes')),
            ],
            options={
                'db_table': 'IslandGenes',
            },
        ),
        migrations.CreateModel(
            name='NameCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cid', models.CharField(max_length=24, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('cds_num', models.IntegerField(default=0)),
                ('rep_size', models.IntegerField(default=0)),
                ('isvalid', models.IntegerField(default=1)),
            ],
            options={
                'db_table': 'NameCache',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('status', models.IntegerField(default=0)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='webui.Analysis')),
            ],
            options={
                'db_table': 'Notification',
            },
        ),
        migrations.CreateModel(
            name='SiteStatus',
            fields=[
                ('status', models.IntegerField(default=0, primary_key=True, serialize=False)),
                ('message', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'SiteStatus',
            },
        ),
        migrations.CreateModel(
            name='UploadGenome',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('filename', models.CharField(blank=True, max_length=120, null=True)),
                ('ip_addr', models.GenericIPAddressField()),
                ('genome_name', models.CharField(blank=True, max_length=40, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('cid', models.IntegerField(default=0)),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'UploadGenome',
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=36)),
                ('expires', models.DateTimeField(default=datetime.datetime(2017, 2, 6, 13, 49, 13, 286264))),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'db_table': 'UserToken',
            },
        ),
        migrations.CreateModel(
            name='Virulence',
            fields=[
                ('protein_accnum', models.CharField(max_length=18, primary_key=True, serialize=False)),
                ('external_id', models.CharField(max_length=18)),
                ('source', models.CharField(blank=True, max_length=4)),
                ('type', models.CharField(max_length=20)),
                ('flag', models.TextField(blank=True, null=True)),
                ('pmid', models.CharField(blank=True, max_length=50, null=True)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'virulence',
            },
        ),
        migrations.CreateModel(
            name='VirulenceCuratedReps',
            fields=[
                ('rep_accnum', models.CharField(max_length=24, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'virulence_curated_reps',
            },
        ),
        migrations.CreateModel(
            name='VirulenceMapped',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_id', models.IntegerField(db_index=True)),
                ('ext_id', models.CharField(blank=True, max_length=24, null=True)),
                ('protein_accnum', models.CharField(blank=True, db_index=True, max_length=18, null=True)),
                ('external_id', models.CharField(blank=True, db_index=True, max_length=18, null=True)),
                ('source', models.IntegerField()),
                ('type', models.IntegerField()),
                ('flag', models.TextField(blank=True, null=True)),
                ('pmid', models.CharField(blank=True, max_length=50, null=True)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'virulence_mapped',
            },
        ),
        migrations.AlterUniqueTogether(
            name='virulencemapped',
            unique_together=set([('external_id', 'gene_id', 'ext_id')]),
        ),
        migrations.AlterIndexTogether(
            name='virulencemapped',
            index_together=set([('ext_id', 'gene_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='genes',
            unique_together=set([('ext_id', 'start', 'end')]),
        ),
        migrations.AlterIndexTogether(
            name='distance',
            index_together=set([('rep_accnum1', 'rep_accnum2'), ('rep_accnum2', 'rep_accnum1')]),
        ),
        migrations.AlterUniqueTogether(
            name='notification',
            unique_together=set([('analysis', 'email')]),
        ),
        migrations.AlterIndexTogether(
            name='genomicisland',
            index_together=set([('aid', 'prediction_method')]),
        ),
    ]
